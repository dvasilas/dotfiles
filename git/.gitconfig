[alias]

	# View the current working tree status using the short format.
 	s = status -s
	
 	d = diff 

	# Show the diff between the latest commit and the current state.
 	dd = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"


	# `git di $number` shows the diff between the state `$number` revisions ago and the current state.
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# List aliases.
 	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit.
 	amend = commit --amend --reuse-message=HEAD

	# Interactive rebase with the given number of latest commits.
 	reb = "!r() { git rebase -i HEAD~$1; }; r"

	l = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'

[apply]

	# Detect whitespace errors when applying a patch.
	whitespace = fix

[branch]

	# Show most recently changed branches first.
	sort = -committerdate

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = true

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = white red
	unmerged = magenta italic

[diff]

	# Detect copies as well as renames.
	renames = copies
	tool = meld
[difftool]
	prompt = false
[difftool "meld"]
	trustExitCode = true
	cmd = open -W -a Meld --args \"$LOCAL\" \"$REMOTE\"
[user]
	name = Dimitrios Vasilas
	email = dv.vasilas@gmail.com
[pager]
#	diff = diff-so-fancy
	show = diff-so-fancy
[log]
	abbrevCommit = true
	follow = true
[grep]
	extendedRegexp = true
[filter "lfs"]
	smudge = git-lfs smudge --skip -- %f
	process = git-lfs filter-process --skip
	required = true
	clean = git-lfs clean -- %f
[pull]
	ff = only
